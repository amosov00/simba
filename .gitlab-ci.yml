image: docker:stable
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2

.rules_backend:
  rules: &rules_backend
    - if: "$CI_COMMIT_REF_NAME == 'master' || $CI_COMMIT_REF_NAME == 'develop'"
      changes:
        - "backend/**/*"
        - "deployment/dockerfiles/*"

.rules_frontend:
  rules: &rules_frontend
    - if: "$CI_COMMIT_REF_NAME == 'master' || $CI_COMMIT_REF_NAME == 'develop'"
      changes:
        - "frontend/**/*"
        - "deployment/dockerfiles/*"

.ssh_helper: &ssh_helper
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

after_script:
  - docker logout $CI_REGISTRY

stages:
  - build
  - deploy

build-backend:
  stage: build
  variables:
    CONTAINER_NAME: 'backend'
    DOCKERFILE_PATH: './deployment/dockerfiles/Dockerfile.backend.common'
  script:
    - docker build --pull -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CONTAINER_NAME:$CI_COMMIT_REF_SLUG-latest" . -f $DOCKERFILE_PATH --no-cache
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CONTAINER_NAME:$CI_COMMIT_REF_SLUG-latest"
  rules: *rules_backend


build-frontend:
  stage: build
  variables:
    CONTAINER_NAME: 'frontend'
    DOCKERFILE_PATH: './deployment/dockerfiles/Dockerfile.frontend.$CI_COMMIT_REF_SLUG'
  script:
    - docker build --pull -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CONTAINER_NAME:$CI_COMMIT_REF_SLUG-latest" . -f $DOCKERFILE_PATH --no-cache
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CONTAINER_NAME:$CI_COMMIT_REF_SLUG-latest"
  rules: *rules_frontend

deploy-develop:
  stage: deploy
  environment:
    name: develop
  only:
    - develop
  script:
    - sh ./deployment/scripts/test-env.sh
    - *ssh_helper
    - sh ./deployment/scripts/proceed-env.sh
    - sh ./deployment/scripts/deploy.sh

deploy-production:
  stage: deploy
  environment:
    name: production
  only:
    - master
  script:
    - sh ./deployment/scripts/test-env.sh
    - *ssh_helper
    - sh ./deployment/scripts/proceed-env.sh
    - sh ./deployment/scripts/deploy.sh